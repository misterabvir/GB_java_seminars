package seminar03.task05;

import java.util.ArrayList;
import java.util.List;

public class Program {
    public static void main(String[] args) {
        int[] arr = { 1, 2, 3, 4, 5 };
        List<List<Integer>> permutations = permutations(arr);
        System.out.println(permutations);
    }

    /**
     * формирует список массивов
     * 
     * @param arr - начальные данные
     * @return
     */
    public static List<List<Integer>> permutations(int[] arr) {
        List<List<Integer>> res = new ArrayList<>();
        backtrack(arr, 0, res);
        return res;
    }

    /**
     * формирует массивы и добавляет их в список
     * 
     * @param arr   - текущие данные
     * @param first - стартовый индекс
     * @param res   - результирующий список
     */
    private static void backtrack(int[] arr, int first, List<List<Integer>> res) {
        if (first == arr.length) {
            List<Integer> permutation = new ArrayList<>();
            for (int num : arr) {
                permutation.add(num);
            }
            res.add(permutation);
        } else {
            for (int i = first; i < arr.length; i++) {
                swap(arr, first, i);
                backtrack(arr, first + 1, res);
                swap(arr, first, i);
            }
        }
    }

    /**
     * обмен значениями
     * 
     * @param arr - текущие данные
     * @param i   - первый индекс
     * @param j   - второй индекс
     */
    private static void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}

/*
 * OUTPUT ==================================
 * [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 2, 1], [3, 1, 2]]
 * 
 * OUTPUT ==================================
 * [[1, 2, 3, 4], [1, 2, 4, 3], [1, 3, 2, 4], [1, 3, 4, 2], [1, 4, 3, 2], [1, 4, 2, 3], 
 *  [2, 1, 3, 4], [2, 1, 4, 3], [2, 3, 1, 4], [2, 3, 4, 1], [2, 4, 3, 1], [2, 4, 1, 3], 
 *  [3, 2, 1, 4], [3, 2, 4, 1], [3, 1, 2, 4], [3, 1, 4, 2], [3, 4, 1, 2], [3, 4, 2, 1], 
 *  [4, 2, 3, 1], [4, 2, 1, 3], [4, 3, 2, 1], [4, 3, 1, 2], [4, 1, 3, 2], [4, 1, 2, 3]]
 * 
 * OUTPUT ==================================
 * [[1, 2, 3, 4, 5], [1, 2, 3, 5, 4], [1, 2, 4, 3, 5], [1, 2, 4, 5, 3], [1, 2, 5, 4, 3], [1, 2, 5, 3, 4], 
 *  [1, 3, 2, 4, 5], [1, 3, 2, 5, 4], [1, 3, 4, 2, 5], [1, 3, 4, 5, 2], [1, 3, 5, 4, 2], [1, 3, 5, 2, 4], 
 *  [1, 4, 3, 2, 5], [1, 4, 3, 5, 2], [1, 4, 2, 3, 5], [1, 4, 2, 5, 3], [1, 4, 5, 2, 3], [1, 4, 5, 3, 2], 
 *  [1, 5, 3, 4, 2], [1, 5, 3, 2, 4], [1, 5, 4, 3, 2], [1, 5, 4, 2, 3], [1, 5, 2, 4, 3], [1, 5, 2, 3, 4], 
 *  [2, 1, 3, 4, 5], [2, 1, 3, 5, 4], [2, 1, 4, 3, 5], [2, 1, 4, 5, 3], [2, 1, 5, 4, 3], [2, 1, 5, 3, 4], 
 *  [2, 3, 1, 4, 5], [2, 3, 1, 5, 4], [2, 3, 4, 1, 5], [2, 3, 4, 5, 1], [2, 3, 5, 4, 1], [2, 3, 5, 1, 4], 
 *  [2, 4, 3, 1, 5], [2, 4, 3, 5, 1], [2, 4, 1, 3, 5], [2, 4, 1, 5, 3], [2, 4, 5, 1, 3], [2, 4, 5, 3, 1], 
 *  [2, 5, 3, 4, 1], [2, 5, 3, 1, 4], [2, 5, 4, 3, 1], [2, 5, 4, 1, 3], [2, 5, 1, 4, 3], [2, 5, 1, 3, 4], 
 *  [3, 2, 1, 4, 5], [3, 2, 1, 5, 4], [3, 2, 4, 1, 5], [3, 2, 4, 5, 1], [3, 2, 5, 4, 1], [3, 2, 5, 1, 4], 
 *  [3, 1, 2, 4, 5], [3, 1, 2, 5, 4], [3, 1, 4, 2, 5], [3, 1, 4, 5, 2], [3, 1, 5, 4, 2], [3, 1, 5, 2, 4], 
 *  [3, 4, 1, 2, 5], [3, 4, 1, 5, 2], [3, 4, 2, 1, 5], [3, 4, 2, 5, 1], [3, 4, 5, 2, 1], [3, 4, 5, 1, 2], 
 *  [3, 5, 1, 4, 2], [3, 5, 1, 2, 4], [3, 5, 4, 1, 2], [3, 5, 4, 2, 1], [3, 5, 2, 4, 1], [3, 5, 2, 1, 4], 
 *  [4, 2, 3, 1, 5], [4, 2, 3, 5, 1], [4, 2, 1, 3, 5], [4, 2, 1, 5, 3], [4, 2, 5, 1, 3], [4, 2, 5, 3, 1], 
 *  [4, 3, 2, 1, 5], [4, 3, 2, 5, 1], [4, 3, 1, 2, 5], [4, 3, 1, 5, 2], [4, 3, 5, 1, 2], [4, 3, 5, 2, 1], 
 *  [4, 1, 3, 2, 5], [4, 1, 3, 5, 2], [4, 1, 2, 3, 5], [4, 1, 2, 5, 3], [4, 1, 5, 2, 3], [4, 1, 5, 3, 2], 
 *  [4, 5, 3, 1, 2], [4, 5, 3, 2, 1], [4, 5, 1, 3, 2], [4, 5, 1, 2, 3], [4, 5, 2, 1, 3], [4, 5, 2, 3, 1], 
 *  [5, 2, 3, 4, 1], [5, 2, 3, 1, 4], [5, 2, 4, 3, 1], [5, 2, 4, 1, 3], [5, 2, 1, 4, 3], [5, 2, 1, 3, 4], 
 *  [5, 3, 2, 4, 1], [5, 3, 2, 1, 4], [5, 3, 4, 2, 1], [5, 3, 4, 1, 2], [5, 3, 1, 4, 2], [5, 3, 1, 2, 4], 
 *  [5, 4, 3, 2, 1], [5, 4, 3, 1, 2], [5, 4, 2, 3, 1], [5, 4, 2, 1, 3], [5, 4, 1, 2, 3], [5, 4, 1, 3, 2],
 *  [5, 1, 3, 4, 2], [5, 1, 3, 2, 4], [5, 1, 4, 3, 2], [5, 1, 4, 2, 3], [5, 1, 2, 4, 3], [5, 1, 2, 3, 4]]
 */